{
  "__": " SIMP Packer manifest to run tests for simp-core or any module       ",
  "__": "  that requires a fully working puppet server.                       ",
  "__": "                                                                     ",
  "__": " USAGE:                                                              ",
  "__": "   `packer build -var-file=vars.json simp.json`              ",
  "__": "                                                                     ",
  "__": " NOTES:                                                              ",
  "__": "   - You should not need change this file.                           ",
  "__": "   - Change behaviors using:                                         ",
  "__": "     * SIMP_PACKER environment variables                             ",
  "__": "     * the `simp_conf.yaml` file                                     ",
  "__": "   - The first `<wait10>`s are killing time until SSH can connect    ",
  "__": "   - The comments starting below (`//` or `#`) will be parsed out by ",
  "__": "     the start-up script.                                            ",
  "__": "                                                                     ",
  //
  // Template User variables:
  //
  //   https://www.packer.io/docs/templates/user-variables.html
  //
  "variables" : {
    "vagrant_password": "vagrant",
    "simp_conf_file": "/var/local/simp/files/simp_conf.yaml",
    "ruby_path": "/opt/puppetlabs/puppet/bin/ruby",
    // NOTE: Uncomment this variable and the "ssh_private_key_file" below
    //       to inject a known ssh key during provisioning.  This is useful
    //       to log in and troubleshoot VMs as they are provisioining
    // "ssh_private_key_file": "/home/ctessmer/.ssh/vagrant.key",
    "ssh_agent_auth": "true",
    "vrdp_bind_address": "0.0.0.0"
  },

  //
  //  VirtualBox Builder (from an ISO)
  //
  //     https://www.packer.io/docs/builders/virtualbox-iso.html
  //
  "builders": [
    {
      "type":              "virtualbox-iso",
      "communicator":      "ssh",
      "guest_os_type":     "RedHat_64",
      "ssh_pty":           "true",
      "vm_name":           "{{user `vm_description`}}",
      "iso_url":           "{{user `iso_url`}}",
      "iso_checksum":      "{{user `iso_checksum`}}",
      "iso_checksum_type": "{{user `iso_checksum_type`}}",
      "headless":          "{{user `headless`}}",
      "vrdp_bind_address": "{{user `vrdp_bind_address`}}",
      "ssh_agent_auth":    "{{user `ssh_agent_auth`}}",
      "output_directory":  "{{user `output_directory`}}",
      "skip_export":       "false",
      "disk_size":         "50000",
      "sata_port_count":   "30",
      "hard_drive_interface": "sata",
      "vboxmanage": [
        ["modifyvm", "{{.Name}}", "--memory", "4096"],
        ["modifyvm", "{{.Name}}", "--nic1", "nat"],
        ["modifyvm", "{{.Name}}", "--nic2", "hostonly"],
        ["modifyvm", "{{.Name}}", "--hostonlyadapter2", "{{user `host_only_network_name`}}"],
        ["modifyvm", "{{.Name}}", "--firmware", "{{user `firmware`}}"],
        ["modifyvm", "{{.Name}}", "--boot1", "disk"],
        ["modifyvm", "{{.Name}}", "--boot2", "dvd"],
        ["modifyvm", "{{.Name}}", "--macaddress2", "{{user `mac_address`}}"],
        ["modifyvm", "{{.Name}}", "--macaddress1", "auto"],
        ["modifyvm", "{{.Name}}", "--cpus", "2"],
        ["modifyvm", "{{.Name}}", "--accelerate3d", "off"]
      ],
      "boot_command": [
        "simp {{user `disk_encrypt`}} {{user `fips`}}","<enter>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10><wait10><wait10>",
        "<wait10><wait10><wait10><wait10>",
        "{{user `big_sleep`}}",
        // set simp user password
        "simp<enter><wait><wait>UserPassword<enter>",
        "<wait><wait>",
        "UserPassword<enter>",
        "<wait5>",
        "{{user `new_password`}}<enter>",
        "<wait5>",
        "{{user `new_password`}}<enter>",
        "<wait5>",
        "exit<enter>",
        "<wait10>",
        // set root user password
        "root<enter><wait><wait>RootPassword<enter>",
        "<wait5><wait>",
        "RootPassword<enter>",
        "<wait5>",
        "{{user `new_password`}}<enter>",
        "<wait5>",
        "{{user `new_password`}}<enter>",
        "<wait5>",
        "echo 'simp ALL=(ALL) NOPASSWD:ALL'  >> /etc/sudoers<enter>",
        "<wait5>",
        "sed -i -e '/Defaults *requiretty/d' /etc/sudoers<enter>",
        "<wait5>",
        // configure NAT interface
        "sed -i -e 's/ONBOOT=no/ONBOOT=yes/g' -e 's/DEFROUTE=yes/DEFROUTE=no/g' /etc/sysconfig/network-scripts/ifcfg-{{user `nat_interface`}}<enter>",
        "<wait5>",
        //"grep NM_CONTROLLED /etc/sysconfig/network-scripts/ifcfg-{{user `nat_interface`}} || echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-{{user `nat_interface`}}<enter>",
        "<wait5>",
        // bring up NAT interface
        "ifup {{user `nat_interface`}}<enter>",
        "<wait5>",
        // Enable SSH on reboot
        "service sshd start<enter>",
        "<wait5>",
        "chkconfig sshd on<enter>",
        "<wait5>",
        "chkconfig firewalld off<enter>",
        "<wait5>",
        "chkconfig iptables off<enter>",
        "<wait5>",
        "exit<enter>"
       ],
      "ssh_username": "simp",
      "ssh_password": "{{user `new_password`}}",
      // NOTE: Uncomment this option and the "ssh_private_key_file" variable
      //       to inject a known ssh key during provisioning.  This is useful
      //       to log in and troubleshoot VMs as they are provisioining
      // "ssh_private_key_file": "{{user `ssh_key`}}",
      "shutdown_command": "sudo /sbin/shutdown -P now"
    }
  ],

  // Set up the users for packer and vagrant and bootstrap the system
  // --------------------------------------------------------------------------
  "provisioners": [

    // Copy scripts from the host to the virtual machine for use later on
    //
    // Some of the scripts are copied up as they are used, but not secondary
    // scripts called from them.
    {
      "type": "file",
      "source": "./scripts",
      "destination": "/var/local/simp/"
    },

    // Copy files from the host to the virtual machine for use later on
    {
      "type": "file",
      "source": "./files",
      "destination": "/var/local/simp/files"
    },

    // TEST:  Check if it booted into fips or not according to the
    //        fips variable set in the boot command.
    //
    // These should run without sudo (the environment vars do not work).
    // ------------------------------------------------------------------------
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/tests/check_settings_at_boot.sh",
      "execute_command": "chmod +x {{.Path}}; {{.Vars}} sh '{{.Path}}'",
      "environment_vars" : [
        "SIMP_PACKER_fips={{user `fips`}}",
        "SIMP_PACKER_disk_encrypt={{user `disk_encrypt`}}"
      ],
      "script" : "scripts/tests/check_settings_at_boot.sh"
    },
    // TEST:  Check for expected partitions
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/tests/check_partitions.rb",
      "execute_command": "chmod +x {{.Path}}; {{.Vars}} {{user `ruby_path`}} '{{.Path}}'",
      "script" : "scripts/tests/check_partitions.rb"
    },

    // Set up the vagrant password
    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-vagrant-users.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo bash '{{.Path}}'",
      "inline" : [
        "set -x",
        "useradd vagrant",
        "echo {{user `vagrant_password`}} | passwd vagrant --stdin",
        "mkdir -p /home/vagrant/.ssh",
        "cp /var/local/simp/files/authorized_keys /home/vagrant/.ssh/authorized_keys",
        "chmod g+rX -R /home/vagrant",
        "chown -R vagrant /home/vagrant"
      ]
    },

    // Set root umask (if configured)
    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-set-root-umask.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo -i '{{.Path}}'",
      "inline" : [
         "root_umask={{user `root_umask`}}",
         "if [ ! -z \"${root_umask}\" ]; then",
           "echo \"umask ${root_umask}\" >> /root/.bash_profile",
           "cat /root/.bash_profile",
         "fi"
      ]
    },

    // Now we run simp using the simp conf yaml file specified in the shell.
    // It should complete successfully.
    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-simp-config.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo -i '{{.Path}}'",
      "inline" : [
         // SIMP-4482 workaround when building SIMP 6.1.0 boxes
         "[[ \"$(cat /etc/simp/simp.version)\" =~ ^6\\.1\\.0- ]] && { echo \"SIMP-4482 workaround: umask 0022\"; umask 0022; }",
         "echo 'umask:'",
         "umask",
         "echo 'Running simp config...'",
         "simp config -a {{user `simp_conf_file`}}"
       ]
    },
    // Disable NetworkManager (may prevent a problem with beaker)
    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-disable-network-manager.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo bash '{{.Path}}'",
      "inline" : [ "/opt/puppetlabs/bin/puppet resource service NetworkManager ensure=stopped enable=false" ]
    },

    // Now run bootstrap.
    //
    // This script also configures a puppet manifest `site::vagrant` that
    // configures the simp and vagrant users to be allowed to ssh and sudo as
    // needed by packer and vagrant.
    //
    // TODO: Move `site::vagrant` out of the bash script heredoc and into its
    //       own file.
    {
     "type": "shell",
      "remote_path": "/var/local/simp/scripts/simp-bootstrap.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo -i '{{.Path}}'",
      "script" : "scripts/simp-bootstrap.sh"
    },

    // Reboot the system.
    //
    // If I use a script for this, it will randomly error out saying return
    // code is not zero.  Reboot seems to be in a different place on Centos 6
    // and 7 and with no path it can't find it.  And passing environment
    // variables doesn't seem to work when the execute command contains sudo
    // even with -E.
    {
      "type": "shell",
      "remote_path": "/var/local/simp/reboot1.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo -E bash '{{.Path}}'",
      "expect_disconnect": true,
      "skip_clean": true,
      "inline" : [
        "echo 'Rebooting...'",
        "if [ -f /usr/sbin/reboot ]; then",
          "/usr/sbin/reboot",
        "else",
          "/sbin/reboot",
        "fi"
       ]
    },

    // ########################################################################
    //                  ____  _____ ____   ___   ___ _____
    //                  |  _ \| ____| __ ) / _ \ / _ \_   _|
    //                  | |_) |  _| |  _ \| | | | | | || |
    //                  |  _ <| |___| |_) | |_| | |_| || |
    //                  |_| \_\_____|____/ \___/ \___/ |_|
    //
    // ########################################################################

    // Upload puppet code
    {
      // Pause a little to let the system boot up all the way
      "pause_before": "300s",
      "type": "file",
      "source": "./puppet",
      "destination": "/var/local/simp"
    },

    // Run puppet again to get closer to a clean run (take 1)
    {
      "type": "puppet-server",
      "ignore_exit_codes": true,
      "extra_arguments": "--test",
      "staging_dir": "/var/local/simp/scripts",
      "puppet_bin_dir": "/opt/puppetlabs/bin"
    },

    // Run puppet again to get closer to a clean run (take 2)
    {
      "type": "puppet-server",
      "ignore_exit_codes": true,
      "extra_arguments": "--test",
      "staging_dir": "/var/local/simp/scripts",
      "puppet_bin_dir": "/opt/puppetlabs/bin"
    },

    // Grant all uploaded scripts premission to execute on the server
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/inline-find-chmod-x--var-local-simp-scripts.sh",
      "inline": [ "sudo find /var/local/simp/scripts -type f -name '*.sh' -print -exec chmod +x {} \\;" ]
    },

    // TEST: Check settings after bootstrap.
    //
    // TODO:  I had to wrap the ruby scripts in shell scripts because it
    // runs them as shells.  Need to figure out the correct
    // execute_command for executing a ruby script
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/inline-run-check_settings-sh.sh",
//      "execute_command": "sudo chmod +x {{.Path}};sudo {{.Vars}} sh '{{.Path}}'",
      "inline": ["sudo sh /var/local/simp/scripts/tests/check_settings.sh"]
    },

    ////////////////////////////////////////////////////////////////////////////
    //
    // Tests have passed!!
    //
    // Now, set up the SIMP server:
    //
    ////////////////////////////////////////////////////////////////////////////
    {
      "type": "shell",
//      "execute_command": "sudo chmod +x {{.Path}}; sudo {{.Vars}} sh '{{.Path}}'",
      "remote_path": "/var/local/simp/scripts/inline-run-simpsetup.sh",
      "inline": ["sudo /var/local/simp/scripts/config/simpsetup.sh"]
    },
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/inline-run-sitepp_edit-rb.sh",
//      "execute_command": "sudo chmod +x {{.Path}}; sudo {{.Vars}} sh '{{.Path}}'",
      "inline": ["sudo {{user `ruby_path`}} /var/local/simp/scripts/config/sitepp_edit.rb"]
    },
    {
      "type": "shell",
      "remote_path": "/var/local/simp/scripts/inline-run-hiera_update-rb.sh",
//      "execute_command": "sudo chmod +x {{.Path}}; sudo {{.Vars}} sh '{{.Path}}'",
      "inline": ["sudo {{user `ruby_path`}} /var/local/simp/scripts/config/hiera_update.rb"]
    },

    // Run puppet server to apply any changes made in hiera and site.pp
    {
      "type": "puppet-server",
      "ignore_exit_codes": true,
      "extra_arguments": "--test",
      "puppet_bin_dir": "/opt/puppetlabs/bin"
    },

    // Add some shortcuts to root's .bashrc (to help get around)
    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-bashrc-extras.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo bash '{{.Path}}'",
      "inline" : [
        "if [ -f /var/local/simp/root/.bashrc-extras ]; then",
          "cat /var/local/simp/root/.bashrc-extras >> /root/.bashrc",
        "fi"
      ]
    },

    // Remove /etc/udev/rules.d/70-persistent-net.rules
    // These can be troublesome on on el6 VMs
    {
      "type": "shell",
      "remote_path": "/var/local/simp/clear-udev-net-persistent-rules.sh",
      "execute_command": "sudo chmod +x {{.Path}}; {{.Vars}} sudo bash '{{.Path}}'",
      "inline" : [
        "if [ -f /etc/udev/rules.d/70-persistent-net.rules ]; then",
          "rm -f /etc/udev/rules.d/70-persistent-net.rules",
        "fi"
      ]
    },

    {
      "type": "shell",
      "remote_path": "/var/local/simp/inline-simp-done.sh",
      "execute_command": "chmod +x {{.Path}}; {{.Vars}} sh '{{.Path}}'",
      "expect_disconnect": true,
      "skip_clean": true,
      "inline" : [
         "echo 'done'"
       ]
    }
  ],

  "post-processors": [
    {
      "type": "vagrant",
      "output": "{{user `postprocess_output`}}/{{user `vm_description`}}.box",
      "keep_input_artifact": false,
      "include": ["./files/packer-vagrant.pem","./files/packer-vagrant.pub"],
      "compression_level": "6"
    }
  ]
}
// vim: filetype=javascript

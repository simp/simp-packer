<%- | String $ipaddress,
      String $linuxdist,
      Boolean $fips,
| -%>
#
# Use the following Ruby code to generate your rootpw hash:
#   ruby -r 'digest/sha2' -e 'puts "password".crypt("$6$" + rand(36**8).to_s(36))'
#
# Use the following command to generate your grub password hash:
#   grub2-mkpasswd-pbkdf2
#
# Replace the following strings in this file:
#
#     #BOOTPASS#  - Your hashed bootloader password
#     #ROOTPASS#  - Your hashed root password
#     #KSSERVER#  - The IP address of your Kickstart server
#     #YUMSERVER# - The IP address of your YUM server
#     #LINUXDIST# - The LINUX Distribution you are kickstarting
#                 - Current CASE SENSITIVE options: RedHat CentOS
#
# This kickstart file was tested with a CentOS 8.4 iso.
#
# On some EL versions (notably 7.0-7.4), anaconda had a known issue, where
# installation images did not support FIPS mode (fips=1) when the kickstart file
# (this file) is loaded from an HTTPS source.
#
# Details:
#
#   - https://access.redhat.com/errata/RHBA-2018:0947
#   - https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/7.5_release_notes
#   - https://bugzilla.redhat.com/show_bug.cgi?id=1341280
#   - https://groups.google.com/forum/?fromgroups#!topic/simp-announce/3pBQDZl1OVc
#
# If this affects your OS, remove the `fips=1 ` string from the bootloader
# line's `--append` argument below (this will not affect the FIPS Mode of the
# final system):
bootloader --location=mbr --append="fips=1 console=ttyS1,57600 console=tty1" --iscrypted --password=grub.pbkdf2.sha512.10000.94454C752918769A415DB7949779653CA87DC7D4B21C4E531F5E53CF16DE397CA8BA8BF758019D5F299717D59E4598040FBA0B3039FA757E033A9ED0E37A7FEF.BA03CF7EAEF494D86C79BBEDDF308C23FD359FC31F63851CE28CDEC0D8B3A278B392136BE8E4F1D9028EC8B90C13908B2438385AA8890E0DF2D1E35CFC6B2788
## Remove the `--location=mbr` option from the above bootloader line if booting UEFI

rootpw --iscrypted $6$58rp5hrn$Rv/tzwlVBS5oHsKXPwcMzohyFzehtOC9HB502E9j8fjPeujf3cd9THmKODO39Y0Fhnimj5AZ.OXu3GByImjDH.
firewall --enabled --ssh
firstboot --disable
logging --level=info
selinux --enforcing

text
zerombr
clearpart --none --initlabel
%include /tmp/part-include
skipx
%include /tmp/repo-include

keyboard us
lang en_US
url --noverifyssl --url https://<%= $ipaddress %>/yum/<%= $linuxdist %>/8/x86_64

network --bootproto=dhcp
reboot

%packages
-sendmail
acl
aide
bzip2
chrony
crontabs
<% if $fips { -%>
dracut-fips
<% } else { -%>
dracut
<% } -%>
fipscheck
git
grub2-efi-x64
iptables
irqbalance
krb5-workstation
libaio
libutempter
logrotate
logwatch
lsof
lsscsi
mdadm
microcode_ctl
mutt
net-snmp
net-tools
netlabel_tools
pciutils
psacct
quota
redhat-lsb
rsync
rsyslog
shim-x64
smartmontools
sssd
stunnel
subversion
sudo
sysstat
tmpwatch
unzip
usbutils
vim-enhanced
wget
which
zip
# Puppet stuff
puppet-agent
# In case of broken repo, these should be installed.
hdparm
kbd
libhugetlbfs
policycoreutils
rootfiles
selinux-policy-targeted
setserial
sysfsutils
# Don't install these
-rhn-check
-rhn-setup
-rhnsd
-subscription-manager
%end

%pre
ksserver="<%= $ipaddress %>"
yumserver="<%= $ipaddress %>"

# Fetch disk and repo detection scripts from kickstart server and run them
# to create the files used by the'%include /tmp/*-include' above.
wget --no-check-certificate -O /tmp/diskdetect.sh https://$ksserver/ks/diskdetect.sh
/bin/sh /tmp/diskdetect.sh

wget --no-check-certificate -O /tmp/repodetect.sh https://$ksserver/ks/repodetect.sh
/bin/sh /tmp/repodetect.sh '8' $yumserver '<%= $linuxdist %>'

%end

%post --nochroot --erroronfail

SYSIMAGE="/mnt/sysimage"

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi
%end

%post

# Disable all the (internet-only) .repo files CentOS kickstarts install
if [ -f /etc/centos-release ]; then
  sed -i -e '/enabled=/d' -e 's/^\(\[.*\]\)/\1\nenabled=0/g' \
    /etc/yum.repos.d/CentOS-*.repo
fi

<% if $fips { -%>
FIPS=true

# In EL8 the bios kickstart was failing because the boot=UUID  kernel parameter
# is not being set.  In FIPs mod it will create a new Boot menu item
# with fips=1, in non fips mode it will update the existing default entry.
# Also, if you are booting fips and you have a seperate boot partition you must set boot=

# In case you need a working fallback
BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
BOOTUUID=`blkid ${BOOTDEV} -o export | grep ^UUID`
DEFAULT_KERNEL_INFO=$(basename $(/sbin/grubby --default-kernel))
DEFAULT_INITRD=$(basename $(/sbin/grubby --info=DEFAULT | grep initrd | cut -f2 -d'='))
DEFAULT_KERNEL_TITLE=`/sbin/grubby --default-title`

if $FIPS; then
  FIPS_SETTING=1
  /sbin/grubby --copy-default --make-default \
    --add-kernel=${DEFAULT_KERNEL_INFO} \
    --initrd=${DEFAULT_INITRD} \
    --title="FIPS ${DEFAULT_KERNEL_TITLE}"
<% } else { -%>
   FIPS_SETTING=0
<% } -%>
# Replace fips= in boot command line.
/sbin/grubby --remove-args="fips" --update-kernel=DEFAULT
/sbin/grubby --args="boot=${BOOTUUID} fips=${FIPS_SETTING}" --update-kernel=DEFAULT

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

if $FIPS; then
  /usr/bin/fips-mode-setup --enable
else
  /usr/bin/fips-mode-setup --disable
fi

ksserver="<%= $ipaddress %>"
echo "Welcome to SIMP!  If this is firstboot, SIMP bootstrap is scheduled to run.
If this host is not autosigned by Puppet, sign your Puppet certs to begin bootstrap.
Otherwise, it should already be running! Tail /root/puppet.bootstrap.log for details.
Wait for completion and reboot.

To remove this message, delete /root/.bootstrap_msg" > /root/.bootstrap_msg
sed -i "2i if [ -f /root/.bootstrap_msg ]\nthen\n  cat /root/.bootstrap_msg\nfi" /root/.bashrc
source /root/.bashrc

# Enable wait-online
systemctl enable NetworkManager-wait-online

# Enable the firstboot bootstrapping script.
wget --no-check-certificate \
  -O /etc/systemd/system/simp_client_bootstrap.service \
  https://$ksserver/ks/simp_client_bootstrap.service
chmod 644 /etc/systemd/system/simp_client_bootstrap.service
wget --no-check-certificate \
  -O /usr/local/sbin/bootstrap_simp_client \
  https://$ksserver/ks/bootstrap_simp_client
chmod 700  /usr/local/sbin/bootstrap_simp_client

systemctl enable simp_client_bootstrap.service
%end

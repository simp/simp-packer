#
# Replace the following strings in this file
# #BOOTPASS# - Your SHA-512 hashed bootloader password
# #ROOTPASS# - Your SHA-512 hashed root password
# #KSSERVER# - The IP address of your Kickstart server
# #YUMSERVER# - The IP address of your YUM server
# #LINUXDIST# - The LINUX Distribution you are kickstarting
#        - Current CASE SENSITIVE options: RedHat CentOS
#
# To generate the BOOTLOADER hash:
#  > grub-crypt
#
# To generate the ROOTPASS hash:
#  > ruby -r 'digest/sha2' -e 'puts "password".crypt("$6$" + rand(36**8).to_s(36))'
#
# Optionally:
# - Adjust the bootloader line for UEFI boot per inline instructions below
# - Disable FIPS per inline instructions below

authconfig --enableshadow --passalgo=sha512

# anaconda has known issues when fips is turned on during boot, so it (fips=1)  was remove from bootloader line.
# see url: https://groups.google.com/forum/?fromgroups#!topic/simp-announce/3pBQDZl1OVc
bootloader --location=mbr --iscrypted --password=6$CxRbPTshtrVhiKe5$zJTrzr7kLP.rvMNJyCz8yOdYNpgIbjMifLTAlH/UADYOFMW9Nflf6SyPvCMEGnBCtP80bmYGLrmD/7nxf2mz/1
## Comment out the line above and uncomment the following line to use UEFI boot
#bootloader --iscrypted --password=#BOOTPASS#

rootpw --iscrypted $6$n5tzmels$1Rz0I5MO.YKYQPd/GhkU6sKOgEe/.vjz7K40XtB5VLHPgj6PIkbn9AGBljS9KdHOfe.0CoDDLz7T6ye/BG2Yg1
zerombr
key --skip
firewall --enabled --ssh
firstboot --disable
logging --level=info
network --bootproto=dhcp
reboot
selinux --enforcing
timezone --utc GMT

install
skipx

%include /tmp/repo-include

text
keyboard us
lang en_US
url --url https://<%= $simpsetup::ks::ipaddress %>/yum/<%= $simpsetup::ks::linuxdist %>/<%= $simpsetup::ks::majver %>/x86_64 --noverifyssl

%include /tmp/part-include

%packages --nobase
redhat-lsb
xorg-x11-xauth
acl
rpm
yum
bzip2
crontabs
libutempter
pciutils
psacct
quota
tmpwatch
vixie-cron
amtu
anacron
coolkey
cpuspeed
cryptsetup-luks
dhclient
gnupg
irqbalance
krb5-workstation
libaio
logwatch
logrotate
mdadm
microcode_ctl
nss_db
openssh-clients
openssh-server
pam_krb5
pam_passwdqc
pam_pkcs11
ntp
readahead
smartmontools
stunnel
sudo
tcp_wrappers
unzip
usbutils
vconfig
wget
which
zip
aide
iptables
iptables-ipv6
netlabel_tools
audit
lsscsi
net-snmp
sysstat
vlock
mutt
subversion
-sysklogd
rsyslog7
-rsyslog
lsof
vim-enhanced
-sendmail
# dracut
## Uncomment the line above and comment out the following to prevent boot-time
## FIPS checks.
<% if $simpsetup::ks::fips { -%>
dracut-fips
<% } else { -%>
dracut
<% } -%>
fipscheck
# Puppet stuff
puppet
facter
rsync
ruby-rdoc
# In case of broken repo, these should be installed.
hdparm
kbd
libhugetlbfs
policycoreutils
rootfiles
selinux-policy-targeted
setserial
sysfsutils
udftools
%end

%pre
ksserver="<%= $simpsetup::ks::ipaddress %>"
wget --no-check-certificate -O /tmp/diskdetect.sh https://$ksserver/ks/diskdetect.sh;
chmod 750 /tmp/diskdetect.sh;
/tmp/diskdetect.sh;
wget --no-check-certificate -O /tmp/repodetect.sh https://$ksserver/ks/repodetect.sh;
chmod 750 /tmp/repodetect.sh;
/tmp/repodetect.sh <%= $simpsetup::ks::majver %> $ksserver;
%end

%post --nochroot --erroronfail

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi
%end

%post
ostype="<%= $simpsetup::ks::linuxdist %>"
if [ $ostype == "CentOS" ]; then
  sed -i -e '/enabled=/d' -e '/^\[.*\]/a enabled=0' /etc/yum.repos.d/CentOS-*.repo;
fi
ksserver="<%= $simpsetup::ks::ipaddress %>"

## Comment out/delete the following block of commands if you want to disable FIPS compliance. ##
### START FIPS ###
<% if $simpsetup::ks::fips { -%>
# In case you need a working fallback
BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
/sbin/grubby --copy-default --make-default --args="boot=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

dracut -f
### END FIPS ###
<% } -%>

# Notify users that bootstrap will run on firstboot
echo "Welcome to SIMP!  If this is firstboot, SIMP bootstrap is scheduled to run.
If this host is not autosigned by Puppet, sign your Puppet certs to begin bootstrap.
Otherwise, it should already be running! Tail /root/puppet.bootstrap.log for details.
Wait for completion and reboot.

To remove this message, delete /root/.bootstrap_msg" > /root/.bootstrap_msg
sed -i "2i if [ -f /root/.bootstrap_msg ]\nthen\n  cat /root/.bootstrap_msg\nfi" /root/.bashrc
source /root/.bashrc

# Download the firstboot bootstrapping service file and its helper script
wget --no-check-certificate -O /etc/rc.d/init.d/simp_client_bootstrap https://$ksserver/ks/simp_client_bootstrap;
chmod 700 /etc/rc.d/init.d/simp_client_bootstrap;
wget --no-check-certificate -O /usr/local/sbin/bootstrap_simp_client https://$ksserver/ks/bootstrap_simp_client;
chmod 700 /usr/local/sbin/bootstrap_simp_client

# Enable firstboot bootstrapping service
chkconfig --add simp_client_bootstrap;
chkconfig --level 35 simp_client_bootstrap on;
%end
